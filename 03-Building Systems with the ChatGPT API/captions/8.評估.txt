在這段影片中，我們將把之前學到的所有內容綜合起來，創建一個端對端的客戶服務助手範例。我們將進行以下步驟。首先，我們將檢查輸入，看它是否會觸發審查 API。

其次，如果輸入未被標記，我們將提取產品清單。第三，如果找到了產品，我們將嘗試查詢它們。

第四，我們將使用模型回答用戶的問題。最後，我們會將回答再次通過審查 API，若未被標記，我們將回傳給用戶。

現在我們有了設置。

我們還有這個額外的導入。

這是一個我們將用於聊天機器人 UI 的 Python 套件。

因此，我將粘貼一個名為「process_user_message」的函數。

實際上，我將首先運行一個範例，然後再詳細講解這個函數。

我們有這個用戶輸入，我們一直在使用。告訴我有關 smartx pro 手機和相機的資訊。還有電視的資訊。

現在讓我們運行這個。

首先，我們運行這個。

如你所見，我們正在經歷回答用戶問題的各個步驟。

第一步是審查步驟，第二步是提取產品清單。

第三步是查詢產品資訊。

現在有了這些產品資訊，模型正在嘗試回答問題，就像我們在前面的影片中所看到的那樣。

最後，它再次將回應通過審查 API，以確保它安全，適合顯示給用戶。

這就是我們現在已經熟悉的回應。

現在讓我們來討論一下發生了什麼。

我們有一個輔助函數「process_user_message」。

它接收用戶的輸入（即當前訊息）和一個包含所有訊息的陣列（這是在我們建立聊天機器人 UI 時使用的）。第一步是檢查輸入是否觸發審查 API。我們在前面的视频中有介紹過這一點。

如果輸入被標記，則會告訴用戶我們無法處理此請求。

如果未被標記，我們會嘗試提取產品清單，就像在前面的视频中所做的那樣。

接著，我們會嘗試查詢這些產品。在這個例子中，如果找不到任何產品，這將是一個空字串。

然後我們會回答用戶的問題，將對話歷史和相關的產品資訊一併提供。

我們得到回應後，將這個回應通過審查 API。

如果回應被標記，我們會告訴用戶我們無法提供這些資訊。也許我們會說，“讓我幫您轉接”，然後你可以進行後續處理。

現在，讓我們將這一切結合起來，並用一個漂亮的 UI 嘗試進行對話。

這裡我們有一個函數，會在與助手互動時累積訊息。

當然，你可以隨時暫停影片，詳細了解這如何運作。

當然，你也可以對我們剛剛看到的那個較長的「process_user_message」函數進行同樣的操作。

現在，我們將粘貼代碼來顯示聊天機器人 UI。

如果我們運行這個，現在就來試著與客戶服務助手進行對話。

我們可以問，“你們有什麼電視？”

在背景中，助手正在執行「process_user_message」函數中的所有步驟。

因此，它列出了各種不同的電視。現在我們來問，“哪一款是最便宜的？”

再次，它通過相同的步驟運行，不過這次它會將對話歷史一併傳入提示中。

好吧，它告訴我們，這款揚聲器是我們最便宜的電視相關產品。

有趣。那麼最貴的是哪一款呢？

最貴的電視是 CineView 8K 電視。

現在我們來問更多關於它的資訊，“告訴我更多有關它的資訊。”

因此，我們收到了更多有關這款電視的資訊。

在這個範例中，我們將課程中學到的技術結合起來，創建了一個綜合系統，並通過一連串步驟來評估用戶的輸入、處理它們，然後檢查輸出。

通過監控系統在大量輸入中的質量，你可以調整步驟並提高系統的整體性能。也許我們會發現某些步驟的提示可以做得更好，也許某些步驟其實不需要，或者我們會找到更好的檢索方法，等等。我們將在下一個影片中進一步討論這些。