在本節中，我們將專注於處理輸入的任務，也就是那些接受輸入並通過一系列步驟產生有用輸出的任務。有時，模型在回答具體問題之前需要詳細推理，這樣才能得出正確答案。如果你曾參加過我們之前的課程「ChatGPT提示工程師課程」，你應該已經見過一些這樣的範例。有時，模型可能會因為急於得出結論而犯推理錯誤，因此我們可以重新框架查詢，要求模型在提供最終答案之前進行一系列相關的推理步驟，這樣它可以更長時間、更有條理地思考問題。總的來說，我們稱這種要求模型逐步推理的策略為「思考鏈推理」（Chain of Thought Reasoning）。對於某些應用，模型在得出最終答案時所用的推理過程如果向用戶展示，可能會不太合適。例如，在輔導應用中，我們可能希望鼓勵學生自己完成答案，但模型對學生解決方案的推理過程可能會揭示答案。

**內心獨白**是一種可以用來減輕這個問題的策略，這只不過是隱藏模型推理過程的方式。內心獨白的想法是指示模型將那些預定隱藏的輸出部分以結構化格式呈現，這樣可以更容易地將其傳遞。

然後，在將最終輸出呈現給用戶之前，輸出會先經過處理，並且只顯示一部分內容。因此，記住前面視頻中的分類問題，我們要求模型將顧客的查詢分為主要和次要類別。根據這個分類，我們可能需要採取不同的指示。假設顧客的查詢被分類為「產品資訊」類別，接下來我們的指示會要求提供我們有的產品信息。所以在這種情況下，分類是：主要類別，常見詢問；次要類別，產品資訊。接下來，我們就從這裡開始進行範例。

讓我們來看這個內心獨白的範例，我們將使用我們一直在使用的分隔符。

現在，讓我們來處理系統消息。

我們在這裡要求模型在得出結論之前先進行推理。指示是：「按照以下步驟來回答顧客的查詢。顧客的查詢將以四個井號（#）作為分隔符。」

接著，我們將這些步驟分開。

- 第一步：「判斷顧客是否在詢問具體的產品或產品。如果是產品類別問題則不計算。」
- 第二步：「如果顧客詢問的是具體產品，判斷這些產品是否在以下列表中。」然後我們列出了可用的產品。這裡有五款可用的產品，全部是筆記型電腦，這些產品實際上是GPT-4生成的虛構產品。
- 第三步：「如果訊息包含上述產品列表中的產品，列出顧客在訊息中做出的假設。例如，顧客可能假設筆記型電腦X比筆記型電腦Y更大，或筆記型電腦Z有兩年保固等。」
- 第四步：「如果顧客做出了假設，根據產品資訊判斷這些假設是否正確。」
- 第五步：「首先，禮貌地更正顧客的不正確假設（如果適用）。只提及或引用列表中的五款產品，因為這些是商店唯一賣的產品。並以友好的語氣回答顧客。」

這些非常詳細的指示對於像GPT-4這樣的高級語言模型來說可能不太必要。

然後，我們會要求模型使用以下格式：

- 第一步，分隔符，推理過程。第二步，分隔符，推理過程，依此類推。

使用分隔符的好處是，我們之後能夠很容易地提取出最終回答顧客的部分，並且切掉前面的內容。

接下來，我們來嘗試一個用戶訊息的範例。

假設用戶的問題是：「藍波Chromebook比TechPro桌面電腦貴多少？」

我們來看看這兩款產品：

- 藍波Chromebook 249.99美元
- TechPro桌面電腦實際上是999.99美元，這其實是不對的。

我們來看看模型如何處理這個用戶查詢。

我們會將它格式化成消息陣列，然後得到回應。

然後我們會打印出來。

我們希望的是，模型會按照這些步驟進行推理，並意識到顧客做出了不正確的假設，然後按照最後一步禮貌地更正顧客。

所以在這一個提示中，我們其實維持了很多不同的複雜狀態。例如，在任何給定的時刻，模型可能會產生與先前步驟不同的結果，並且我們可能需要做出不同的處理。

例如，如果用戶在第三步中沒有做出任何假設，那麼第四步就不會有任何輸出。因此，這是一個相當複雜的指示，我們來看看它是否做對了。第一步，用戶在詢問具體產品，他們在詢問這兩款產品的價格差異。

用戶假設藍波Chromebook比TechPro桌面電腦更貴，這個假設實際上是錯誤的。

模型正在進行推理，花了一些時間來思考問題。

正如人類在回答問題時會花時間進行推理一樣，模型如果也能花時間思考，效果會更好。

因此，最終給用戶的回應是：藍波Chromebook實際上比TechPro桌面電腦便宜。TechPro桌面電腦的價格是999.99美元，而藍波Chromebook的價格是249.99美元。

接下來我們來看看另一個用戶訊息的範例。

此時，請隨時暫停視頻並嘗試自己的訊息。

我們來格式化這個用戶訊息，問題是：「你們有賣電視嗎？」如果你還記得我們的產品列表，我們只列出了不同的電腦。那麼模型會怎麼說呢？

在這個情況下，第一步是，用戶在問商店是否賣電視，但電視並不在可用產品列表中。所以如你所見，模型跳過了中間步驟，直接回應用戶，因為它意識到中間步驟其實是多餘的。我會說我們要求以這個具體格式來輸出，所以技術上，模型並沒有完全遵循我們的要求。再說，越是高級的模型會越擅長處理這些。於是這個問題的回應是：「抱歉，我們商店不賣電視。」

然後它列出了可用的產品。

再次提醒，你也可以嘗試一些自己的回應。現在，我們只想顯示回應的這一部分。我們不希望顯示前面的部分。所以我們可以將字串切割，在最後一次出現的分隔符處切開，然後只顯示模型輸出的最後部分。

我們來寫一些代碼來獲取這個字串的最後部分。我們會使用try-except塊來優雅地處理錯誤，以防模型輸出的格式有問題，沒有正確使用這些分隔符。我們會說最終回應是響應，然後我們會在分隔符處分割字串。

因為我們需要的是最後一次出現的分隔符，所以只需要獲取輸出列表中的最後一項。

接著我們會去除任何多餘的空白。因為如你所見，分隔符後面可能會有空白。

接下來我們會捕獲任何錯誤，並設置回退回應：「抱歉，我現在遇到了一些問題。請再試著問我另一個問題。」然後我們就可以打印最終回應。

如你所見，我們只是把字串切割，獲得最終的輸出。這就是如果我們將其應用於實際應用時，會顯示給用戶的內容。

總體而言，我想指出，這個提示對於這個任務來說可能有點繁瑣。你可能並不需要所有這些中間步驟。因此，不妨嘗試看看是否能找到更簡單的方法來完成這個任務。一般來說，在提示的複雜性上找到最佳的平衡點需要進行一些實驗。

因此，在決定使用某個提示之前，試試不同的提示是非常有益的。在下一個視頻中，我們將學習另一種策略來處理複雜的任務，即將這些複雜的任務拆分成一系列更簡單的子任務，而不是一次性完成整個任務。