在本節中，我們將專注於「**評估輸入內容的任務**」，這對於確保系統的品質與安全性非常重要。

對於那些需要大量不同指令集來處理各種情境的任務，**先對查詢進行分類**，然後根據分類來決定要使用哪一組指令，會是一個非常有幫助的做法。這可以透過**定義固定的類別**，以及**為每個類別硬編碼相對應的指令**來實現。

舉例來說，在建立一個客服助理系統時，首先分類使用者的查詢類型，然後根據這個分類決定要提供哪些回應指令，會是很重要的流程。

例如，當使用者要求**關閉帳號**時，你會給出一套特定的指令；而如果使用者是詢問某項**產品資訊**，那指令就會完全不同。第一種情況下，你可能會加入「如何關閉帳號」的步驟；而第二種情況下，則可能提供產品的詳細說明。

讓我們看一個具體範例，這樣會更清楚。

這裡我們有一段**system message（系統訊息）**，用來定義整體模型的行為邏輯。我們也使用了一個**分隔符號（delimiter）**來區分訊息的不同部分。分隔符只是一種幫助模型辨別訊息結構的方式，在這個例子中，我們使用的是井字號 `###` 作為分隔符，這是一個不錯的選擇，因為它在 tokenizer 中只會被視為一個 token。

以下是我們的系統訊息內容：

>「你將會收到一些客戶服務的查詢，這些查詢會以井字號（#）分隔。請將每個查詢分類為**主類別**（primary category）與**次類別**（secondary category），並以 JSON 格式輸出，包含 `primary` 和 `secondary` 這兩個鍵。」

接著，我們會定義可用的主類別，例如：

- billing（帳單）
- technical support（技術支援）
- account management（帳號管理）
- general inquiry（一般查詢）

還有一些次類別，例如：

- unsubscribe（取消訂閱）
- upgrade（升級）等。

現在我們來看一個使用者的訊息範例：

>「我希望你能刪除我的個人資料和所有的使用者數據。」

我們將這個訊息與系統訊息一起，使用井字號 `###` 分隔，格式化為一個 messages 清單。

看這段內容，「刪除我的個人資料」顯然是與帳號管理有關，具體來說應該是「關閉帳號」。

讓我們看看模型如何分類。

很好，模型的分類結果是：

```json
{
  "primary": "account management",
  "secondary": "close account"
}
```

這就是我們希望的結果。

使用像 JSON 這樣的結構化輸出有個好處：你可以輕鬆地把它讀進程式中，例如用 Python 的字典，或者用其他語言的資料結構，然後當作後續步驟的輸入使用。

接下來再看一個範例。這是另一段使用者訊息：

>「請告訴我更多關於你們的平面電視。」

我們還是使用相同的訊息清單和格式，來呼叫模型取得回應。

模型的回覆分類如下：

```json
{
  "primary": "general inquiry",
  "secondary": "product information"
}
```

這也是正確的。

總的來說，根據客戶查詢的分類結果，我們就能提供一套**更具體的指令**來處理接下來的步驟。

在電視的案例中，我們可能會加入電視的詳細資訊；而在帳號刪除的情況中，則可能提供關閉帳號的連結或說明。

我們將會在後續影片中學到更多處理輸入的技巧。

而下一段影片，我們將探討**更多輸入評估的方法**，特別是如何確保使用者以**負責任的方式**來使用這個系統。
