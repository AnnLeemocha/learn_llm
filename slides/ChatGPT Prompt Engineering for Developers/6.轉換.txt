大型語言模型非常擅長將輸入轉換成不同的格式，比如將一段文字從一種語言翻譯成另一種語言，或者進行拼字和文法的修正。

也可以處理語法不太正確的句子，幫你稍作修正；甚至能進行格式轉換，例如將 HTML 轉成 JSON。我以前常常靠一堆正則表達式（regex）痛苦地處理這些任務，而現在用大型語言模型搭配幾個提示，就可以輕鬆做到。

我現在幾乎所有的寫作都會請 ChatGPT 幫我校對，所以我也很期待在這份 notebook 裡展示一些範例。

首先我們會載入 OpenAI 模組，然後使用我們在前面影片一直用的 get_completion 函數。第一個任務是翻譯。大型語言模型訓練時參考了大量的網路文本，其中包含來自許多不同語言的內容，這也讓模型具備了翻譯的能力。這些模型可以處理上百種語言，雖然熟練度不一樣，但基本都有一定能力。我們來看一些使用範例。

先從簡單的開始。

這個例子中，我們的提示是「請將以下英文翻譯成西班牙文」："Hi, I would like to order a blender."
回覆是：「Hola, me gustaría ordenar una licuadora。」
對不起各位西語使用者，我其實不會講西班牙文，這一聽就知道（笑）。

接著我們來看另一個例子，這次的提示是「請告訴我這是什麼語言」
然後輸入句子是法文：「Combien coûte le lampadaire？」

執行後，模型判斷：「這是法文。」

模型也可以一次處理多種翻譯。

在這個例子中，我們要把句子翻譯成法文、西班牙文，還有「英文海盜語」。
輸入是："I want to order a basketball."
結果會得到三種翻譯版本：法文、西班牙文、海盜風格的英文。

有些語言的翻譯會因說話者與聽者的關係而有所不同，你也可以在提示中告訴語言模型，它就能做出相對應的翻譯。

例如這個例子，我們的提示是：「請將以下句子翻譯成西班牙文的正式與非正式版本」："Would you like to order a pillow?"
這裡我們用了不同的分隔符，其實哪種分隔符都可以，只要格式清楚即可。

結果會列出正式語氣與非正式語氣的翻譯。
正式語氣適用於對上或正式場合，非正式語氣適用於朋友間的對話。
雖然我不會說西班牙文，但我爸會，他說這樣翻譯是對的。

接著，我們假裝自己在經營一個跨國電子商務公司，使用者的訊息會來自各種語言。他們會用不同語言回報 IT 問題，因此我們需要一個「通用翻譯器」。

首先我們貼上一串來自不同語言的使用者訊息。
然後用迴圈一一處理每一則訊息：

python
複製
編輯
for issue in user_messages:
接著貼上一段稍微長一點的程式碼，第一步是判斷每則訊息是什麼語言。

我們會印出原始訊息的語言與內容，然後要求模型將訊息翻譯成英文與韓文。

執行後，像是有一則原始訊息是法文，模型就說「這是法文」，然後給出英文與韓文的翻譯。

你也可以改一下提示，比如叫它只輸出語言名稱一個單字，不要用整句話，或是讓它輸出成 JSON 格式，這樣可以提高穩定性。

就這樣，我們已經做出一個簡單的「通用翻譯器」。你也可以暫停影片，加入你自己想測試的語言，看看模型的表現。

接下來我們來談「語氣轉換」。寫作風格會依讀者不同而有變化，比如你寫給同事或教授的 email 跟發給弟弟的簡訊語氣一定不同。ChatGPT 也可以幫你改寫成不同語氣的版本。

來看個例子：

提示是：「將以下俚語轉成正式商業信件」
"Dude, this is Joe, check out this spec on the standing lamp."

執行後，模型會把它轉成一封正式的提案信，內容是介紹這個立燈的規格。

下一個任務是格式轉換。ChatGPT 很擅長不同格式間的轉換，例如 JSON ↔ HTML、XML、Markdown 等等。

我們可以在提示中描述輸入與輸出格式。

例如這個例子，我們有一份 JSON 資料，內容是幾位餐廳員工的名字與 email。

提示是：「請將以下 Python 字典從 JSON 轉換成一個包含欄位標題與標題的 HTML 表格。」

執行後，模型會產生 HTML，列出所有員工的名字與 email。

我們可以使用 display(HTML(response)) 來顯示這份 HTML，結果會是一張格式正確的表格。

下一個轉換任務是「拼字與文法校對」，這也是 ChatGPT 最常見的應用之一。我自己也非常推薦使用，尤其當你不是在寫自己的母語時。

我會貼上一組有拼字或文法錯誤的句子，然後用迴圈逐句請模型進行校對：

提示是：「請校對並修正以下句子」，再加上一些分隔符。
執行後，模型可以修正這些錯誤。

我們可以進一步優化提示，比如：

「請校對並修正以下句子，若無錯誤請回覆『未發現錯誤』。」

這樣可以讓提示更具一致性，讓回應更穩定。雖然模型現在回傳還會加上引號，但你可以透過一些反覆測試與提示調整，找出最可靠的提示語法。

再看一個例子：你在公開論壇張貼評論前，校對文字總是好的。

這裡有一段關於一隻熊貓娃娃的評論，我們請模型校對這段評論。執行後會得出修正過的版本。

很酷的是，我們可以比較「原始評論」與「修正版」之間的差異。我們可以使用 redlines 這個 Python 套件，找出兩者的 diff 並顯示出來。這樣你可以清楚看到哪些地方被修改了。

剛才我們使用的提示是：「請校對並修正這段評論」。
但你也可以進行更大幅度的調整，比如改變語氣。

我們再試一次：這次的提示是「請校對並修正這段評論，讓它更具說服力、符合 APA 格式、針對進階讀者，並以 Markdown 格式輸出」。

用原始的熊貓評論內容，再執行一次。

這樣就能得到一篇格式完整、風格正式的 APA 評論。

這部影片的「轉換」部分就到這裡。下一部影片會介紹「擴展（Expanding）」，我們將從一個簡短提示，產生一段更長、更自由形式的回答。