大型語言模型令人興奮的一點是，你可以用相對少量的努力來建立一個自訂的聊天機器人。

ChatGPT 的網頁介面讓你可以透過大型語言模型進行對話，但更酷的一點是，你也可以使用大型語言模型來建立你自己的聊天機器人，讓它扮演 AI 客服代表，或是餐廳的 AI 點餐員。在這部影片中，你將學會如何自己動手完成。我會更詳細地介紹 OpenAI 的聊天補全格式的組成，然後你會親手建立一個聊天機器人。那我們開始吧！首先，我們會像往常一樣設置 OpenAI 的 Python 套件。

像 ChatGPT 這樣的聊天模型，其實是被訓練來接收一連串訊息作為輸入，並輸出由模型生成的訊息。

雖然聊天格式是為了讓像這樣的多輪對話變得更容易，但從之前的影片中我們也看到，它同樣適用於單輪任務，甚至不需要對話。接著我們要定義兩個輔助函數。這是我們在所有影片中都在使用的 "get_completion" 函數。如果你仔細看，它接受一個提示詞，但實際上我們是把這個提示詞放進一個看起來像是「使用者訊息」的格式中。這是因為 ChatGPT 是聊天模型，也就是說它是被訓練來接收一連串訊息作為輸入，再回傳模型生成的訊息作為輸出。所以，使用者訊息是輸入，助理訊息是輸出。

在這部影片中，我們將使用不同的輔助函數。我們不只是輸入一個單一提示詞並取得一個回答，而是要傳入一個訊息列表，這些訊息可以來自不同的角色。我會來介紹這些角色。以下是訊息列表的範例，第一則訊息是系統訊息，給出了整體的指令。接著是使用者與助理之間的輪流對話。這個對話會一直持續下去。如果你使用過 ChatGPT 的網頁介面，那麼你的訊息就是使用者訊息，而 ChatGPT 的回應則是助理訊息。系統訊息可以用來設定助理的行為與角色，作為對話的高階指令。你可以把它想像成在助理耳邊悄悄說話，引導它的回應，而使用者則不會察覺這個系統訊息的存在。如果你是使用者，使用 ChatGPT 時大概也不知道系統訊息的內容。

系統訊息的好處是，它提供開發者一種方式來框架對話，而不必把指令內容直接包含在使用者的請求中。你可以「悄悄引導」助理，讓它按照你想要的方式回應，而使用者不會知道背後發生了什麼。

現在我們來試著在對話中使用這些訊息。我們會使用新的輔助函數，根據訊息取得回應。

我們這次也設置了較高的 temperature。

系統訊息是：「你是一位說話像莎士比亞的助理」。這是在告訴助理它應該怎麼表現。第一則使用者訊息是：「講個笑話。」接下來是「為什麼雞要過馬路？」，最後一則是「我不知道。」

如果我們執行這段程式，回應是：「為了到另一邊。」我們再試一次。

「為了到另一邊，親愛的先生或女士。」這是個古老且永不失效的笑話。這就是莎士比亞風格的回答。接下來我們再試一次，這次更清楚地指出這是助理訊息。所以我們來印出整個訊息回應。

這樣就更清楚了。這是助理訊息。

角色是 assistant，內容就是訊息本身。這就是這個輔助函數的運作方式——我們只是把訊息的內容取出來。

接下來我們做另一個例子。訊息是系統訊息：「你是一位友善的聊天機器人。」第一個使用者訊息是：「嗨，我叫 Isa。」我們來取得第一則助理訊息的回應。

回應是：「嗨 Isa！很高興認識你。有什麼我可以幫忙的嗎？」

再來我們試試另一個例子。

這次的訊息還是「你是一位友善的聊天機器人」，使用者訊息是：「你可以提醒我我的名字是什麼嗎？」我們取得回應。

可以看到，模型其實不知道我的名字。每次與語言模型的對話都是獨立的互動，也就是說你必須提供所有相關訊息，模型才能在目前的對話中理解。

如果你想讓模型「記得」之前的對話，你必須在輸入中一併提供先前的訊息。我們稱這個為「上下文」。來試試看。

我們現在提供了模型需要的上下文，也就是我叫 Isa，然後我們再次問「我叫什麼名字？」。這次模型就能回答了，因為我們在輸入的訊息列表中給了完整的上下文。現在你將建立自己的聊天機器人。

這個聊天機器人叫做「OrderBot」，我們會自動收集使用者的輸入與助理的回應，來建立這個「OrderBot」。它會負責幫披薩店接單。首先我們定義一個輔助函數，這個函數會收集使用者訊息，避免手動輸入。我們會建立一個簡易的使用者介面來輸入訊息，並把它加到一個叫做「context」的列表中，每次都用這個 context 來呼叫模型。模型的回應也會加入 context，所以 context 會越來越長。

這樣模型就有足夠資訊來決定下一步該做什麼。接下來我們設置並執行這個 UI 來展示 Autobot。這裡是 context，其中包含了系統訊息與菜單。

請注意，每次呼叫語言模型時，我們都會用相同的 context，而這個 context 會隨時間累積。

我們來執行看看。

我輸入：「嗨，我想點個披薩。」助理回應：「太好了，你想點哪種披薩？我們有義大利臘腸、起司與茄子披薩。」嗯。「價格是多少？」太好了，有價格。我想要一個中份茄子披薩。你可以想像這段對話可以繼續下去。我們來看看我們在系統訊息中寫了什麼。

「你是 Autobot，一個自動化的服務，用來收集披薩餐廳的訂單。

你先向顧客問好，然後收集訂單，接著詢問是外帶還是外送。你會收集整份訂單，然後總結並再確認顧客是否還要加點其他東西。如果是外送，你可以詢問地址。最後你會收款。確保釐清所有選項、加料與尺寸，確保從菜單中能唯一辨識餐點。你要用簡短、非常口語化與友善的方式回應。菜單如下：」，接著是菜單內容。

讓我們回到對話，看助理有沒有照指示行事。

太好了，助理問我們是否需要加料，這是我們在系統訊息中有指定的。我說不要額外加料。

「好的，請問你還想點什麼嗎？」我們來點個水。其實想點薯條。

「要小份還是大份？」這很棒，因為我們在系統訊息中有要求助理要釐清配料與配菜。所以你應該理解了，現在可以自己試試看。你可以暫停影片，在左側的筆記本中執行這段程式。

接下來我們可以請模型根據這段對話建立一份 JSON 格式的訂單摘要，可以送到訂單系統。我們會新增一則系統訊息，這是一個指令，內容是：「根據之前的點餐內容建立一份 JSON 格式的摘要。列出每樣商品的價格。欄位包括：1）披薩（包含配料），2）配料列表，3）飲料列表，4）配菜列表，以及總價格。」你也可以用使用者訊息來下這個指令，不一定非得是系統訊息。



來執行看看。

注意這次我們用的是較低的 temperature，因為這種任務我們希望輸出能夠較穩定。對話型代理人可能適合較高的 temperature，但對於客服類型的聊天機器人，可能也希望輸出穩定一點。

這裡就是我們訂單的摘要。

如果想的話，我們就可以把這份資料提交給訂單系統。所以到這裡為止，你已經建立了自己的訂單聊天機器人。你可以自由地進一步自訂這個機器人，調整系統訊息，改變它的行為風格與知識角色。
