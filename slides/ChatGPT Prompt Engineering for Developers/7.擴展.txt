**擴展（Expanding）**是指將較短的文字，例如一組指令或主題清單，透過大型語言模型產生出一段較長的文字，例如一封電子郵件或一篇有關某個主題的文章。這個功能有很多很棒的應用情境，比如把語言模型當作你的腦力激盪夥伴。不過我也想提醒一下，這項功能也可能被濫用，例如有人可能會用它來大量產生垃圾郵件。因此，當你使用這類語言模型功能時，請負責任地使用，並且以幫助他人的方式使用它。

這部影片中，我們會示範如何使用語言模型，根據一些資訊來產生一封個人化的電子郵件。這封郵件是由 AI 機器人自稱發出的，正如 Andrew 提到的，讓使用者知道這是由 AI 所產生的內容是很重要的。我們也會使用語言模型的一個參數叫做「temperature（溫度）」，它可以讓你調整模型回覆的多樣性與探索程度。

那我們就開始吧！

首先還是老樣子，我們會做一些基本設定：載入 OpenAI 的 Python 套件，並定義我們的輔助函式 get_completion。

接下來我們要根據一則顧客評論來撰寫一封客製化的電子郵件回覆。我們會根據顧客留下的評論內容與評論的情緒，請語言模型產生個別化的回應。

我們會使用語言模型來根據顧客對果汁機的評論以及該評論的情緒來寫出一封客製化的回覆郵件。評論的情緒已經透過我們在「推論（inferring）」影片中介紹過的提示語來提取出來。

現在我們要根據情緒來調整回覆的內容：

提示語如下：

「你是一位客服 AI 助理。你的任務是撰寫一封電子郵件回覆給一位重要的顧客。根據以三個反引號 ``` 包圍的顧客電子郵件內容，產生一封回覆，感謝對方的評論。
若評論情緒為正向或中立，請感謝對方的評論；
若情緒為負面，請道歉，並建議他們聯繫客服。
請使用評論中提到的具體細節，語氣保持簡潔且專業。
最後請以 'AI customer agent' 簽名。」

在使用語言模型產生會顯示給使用者的文字時，讓使用者知道這段內容是 AI 所生成的，是非常重要的透明做法。

我們會將顧客的評論內容和情緒一起輸入。其實也可以只輸入評論，讓提示語幫我們同時萃取情緒與撰寫郵件，但為了範例清楚，這裡我們是已經先取得情緒的結果。

模型產生的回覆會針對顧客在評論中提到的細節做出回應，並在情緒是負面的情況下，建議對方聯繫客服，這也正是我們在提示語中所要求的行為。

接下來，我們要介紹語言模型的一個參數：temperature（溫度），這個參數可以讓你調整模型產生回應的多樣性。你可以把 temperature 想像成模型的「探索程度」或「隨機性」。

舉個例子，當你輸入「我最喜歡的食物是」這句話時，模型最有可能產生的下一個詞可能是「披薩」，接下來可能是「壽司」或「塔可餅」。

當 temperature 設為 0，模型總是會選擇最可能的下一個字（這裡就是「披薩」）；

當 temperature 提高，模型就可能選擇機率較低的選項（例如塔可餅）；

溫度越高，模型的回應越多變，也可能越有創意。

想像一下，如果模型接下來要繼續生成句子，「我最喜歡的食物是披薩」這個回應會走向一條路，「我最喜歡的食物是塔可餅」則會走向另一條完全不同的敘述方向。隨著模型繼續生成文字，兩條路的內容會越差越多。

一般來說，如果你想要可預測、穩定的結果，建議使用 temperature = 0。
這系列影片中，我們大多也都使用 temperature = 0。
但如果你想要較具創意、變化多的內容，則可以考慮使用較高的 temperature。

現在我們來實驗一下這個參數。我們使用剛才的提示語，產生一封客戶回覆郵件，但這次我們將 temperature 設為 0.7。

在 get_completion 函式中，我們可以設定模型與 temperature，我們之前使用的是預設值。這次我們改變 temperature 來觀察差異。

使用相同的提示語與內容，設定 temperature = 0.7 之後執行，你會發現模型產生了一封與之前不同的郵件。如果再執行一次，又會看到另一封不同的版本。

這說明：當 temperature 設為 0，每次產生的內容是一樣的；而 temperature = 0.7 時，每次產出的內容會有差異。

我建議你可以自己動手試試這個提示語，試著調整不同的 temperature 值，看看輸出的變化。

總結一下：

高溫度（higher temperature） → 模型輸出更隨機、更有創意，也可能更「分心」；

低溫度（temperature = 0） → 輸出更可控、可重現，適合需要一致性回應的情境。

下一部影片，我們會開始介紹 Chat Completions 的 API 格式，以及如何使用這個格式來建立一個自訂的聊天機器人。