當我在使用大型語言模型（Large Language Models, LLM）開發應用程式時，幾乎**從來沒有**在第一次嘗試就寫出最終會用在應用中的提示（prompt）。但這並不是最重要的事情——**只要你有一套好的迭代流程，能夠一步步改進你的提示**，你最終就能寫出一個能有效完成任務的好提示。

你可能聽過我說過：「當我訓練機器學習模型時，幾乎從來不會第一次就成功。」事實上，如果第一次訓練就成功，我反而會很驚訝。在提示工程中也是類似的情況。也許第一次的提示成功的機率稍微高一點，但就像他說的，**第一次是否成功並不重要，重要的是你是否有一個良好的流程，去開發出適合你應用的提示**。

那麼接下來，我們來看看一些程式碼範例，我也會展示一些思維框架，幫助你了解如何**迭代地開發提示**。

---

如果你之前上過我教的機器學習課程，可能看過我使用的開發流程圖，說明機器學習的開發過程通常是這樣的：你有一個想法，然後去實作它，寫程式、收集資料、訓練模型，接著得到實驗結果。然後你會檢視這些結果，也許做誤差分析，找出哪些地方有效、哪些無效。你可能甚至會重新思考要解決的問題或改變做法，再次實作並重新實驗，如此反覆進行，直到開發出有效的模型。

如果你對機器學習不熟，也沒看過這張圖也沒關係，對這次的內容沒什麼影響。

當你在撰寫提示、開發基於 LLM 的應用時，流程其實也**非常類似**：你有一個任務要完成，接著撰寫**第一版提示**，希望它夠清楚、具體，必要時讓模型有思考時間。然後執行看看結果。如果效果不佳，就去分析為什麼——可能是指令不夠清楚？可能沒有讓模型有足夠的「思考空間」？

**這樣不斷調整、反覆實驗、改進提示的過程**，就是提示工程的精髓。

這也是為什麼我個人**不太在意那些網路上的文章什麼「30 個完美提示」**。我認為世上根本沒有什麼「萬用完美提示」，**更重要的是你是否有一套開發適合自己應用的提示流程**。

---

現在，我們來看一個實際例子。我這裡準備了一些程式碼（跟前幾段影片裡一樣），我們先匯入 `openai` 和 `os`，然後讀取 API 金鑰，並定義前面看過的 `getCompletion()` 輔助函式。

我們這次要做的任務是：「**將一張椅子的產品說明表（fact sheet）轉換為零售網站上的行銷描述**」。我會貼上這張椅子的說明內容，它描述了設計風格、材質、尺寸、選項、來自義大利等等。

我們希望根據這份技術規格，幫助行銷團隊撰寫產品說明。

---

我執行一下基本設定後，接著貼上第一版的提示內容。提示大意是：

> 你的任務是幫助行銷團隊根據技術規格表撰寫一段適用於零售網站的產品描述。

這是我第一次嘗試寫提示的版本。我執行之後，模型寫出來的描述看起來還不錯，例如開頭寫著：

> 為您介紹這款令人驚艷的中世紀風格辦公椅，是完美的辦公空間之選...

但是我看著這段輸出，心想：這描述好像**有點太長了**。雖然它**完全照著我說的去做**——從技術規格出發寫了一段描述。

所以我接著調整提示，讓它偏向「技術型」的描述，告訴它這是為家具零售商而寫的，應該聚焦在材質和結構上。

再次執行後，它寫出了像「鋁製塗層椅腳、氣壓升降系統、高品質材質」等等技術性用語。

然後我想到，我希望最後還能**包含產品 ID**，也就是 SWC-110 和 SWC-100 這兩款。

我進一步在提示結尾加上：

> 在描述結尾處列出技術規格中每個七位數字的產品 ID。

再次執行後，模型產出的描述中就包含了這兩個產品 ID。

---

這個過程就是一個典型的**提示迭代開發（iterative prompt development）**。  
在上個影片中，Isa 提過幾個提示寫作的最佳實踐。我的做法就是**先記住那些原則**（像是要清楚、具體、有時讓模型「思考」），然後撰寫第一版提示，看看效果，再慢慢調整。

很多我們今天看到的「成功的提示」其實都是透過這樣反覆修正出來的。

---

來點進階的：我還可以寫一個更複雜的提示，例如：

> 在產品描述後，加入一個表格顯示產品尺寸，並用 HTML 格式輸出整段內容。

我執行後，模型輸出了完整的 HTML 描述。我們甚至可以用 Jupyter Notebook 顯示這段 HTML，來驗證是否正確。結果也成功渲染了出來，有建構方式、材質、尺寸表等等。

不過，我剛才忘了加上「限制在 50 字內」的提示，所以描述有點長。如果你想，可以暫停影片，加上這個限制再重新執行一次，看會得到什麼不同的結果。

---

我希望你從這段影片中了解到：  
**提示的開發是一個反覆實驗、漸進改進的過程。**  

嘗試 → 觀察結果是否符合預期 → 改進提示 → 再試一次。

你要思考的可能是：  
- 怎麼讓指示更清楚？  
- 是否需要讓模型更「有時間思考」？  
- 是否可以調整格式或語氣？

我認為，要成為一位出色的提示工程師，與其說要懂什麼「神提示」，**更重要的是要有一套良好的開發流程**，能根據你的應用需求設計出合適的提示。

---

這次我只用一個例子來說明整個開發過程。實際上，在更複雜的應用中，你可能會使用多個例子——例如一次測試 10 個、甚至 50 或 100 份產品說明表，並根據多個輸出結果來調整提示。

在應用還處於早期階段時，很多人跟我一樣，只用一個例子開始開發。  
但當應用逐漸成熟時，你可能需要對**更多資料進行測試與評估**，例如測試某個提示在多個產品說明表下的平均或最差表現。

但這通常是應用開發後期才需要做的事，當你需要用這些指標來微調提示的最後幾步。

---

所以請多多練習，在 Jupyter Notebook 中試著修改提示、跑不同版本，看看會得到什麼結果。

等你準備好後，我們就可以繼續下一段影片：  
我們將介紹語言模型在軟體應用中最常見的一個用途——**摘要文本**。  
準備好了嗎？那我們就繼續下一個單元吧！