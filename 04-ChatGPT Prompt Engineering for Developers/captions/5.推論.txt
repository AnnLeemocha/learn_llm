接下來這部影片講的是「推論（Inferring）」。我喜歡把這些任務想像成模型接收一段文字作為輸入，然後進行某種分析。這可以是提取標籤、提取名字、理解文本的情感，這類的事情。

如果你想要判斷一段文字的情感是正面還是負面，在傳統的機器學習流程中，你得先收集標註過的資料集、訓練一個模型、再想辦法把這個模型部署到雲端之類的地方，最後才能做出推論。這樣當然是可行的，但整個流程很麻煩。而且針對每一個任務，例如情感判斷、名稱提取或其他任務，你都得訓練並部署一個新的模型。

大型語言模型（LLM）的一個很棒的優點是，對於像這樣的許多任務，你只需要撰寫提示（prompt），它就能幾乎立即開始產生結果。這對應用開發速度來說，是個巨大的優勢。而且你可以用一個模型、一個 API，完成很多不同的任務，而不需要訓練和部署一堆不同的模型。

好，讓我們直接進入程式碼部分，看看怎麼利用這個特性。這裡是我們的基礎範例程式碼，我先執行它。我要用的一個實例是一篇關於一盞燈的評論，比如「需要一盞適合臥室的漂亮燈具，而且這款還有額外的收納空間」，諸如此類的內容。

接下來我會寫一個提示，來判斷這段評論的情感。
我可以寫：「以下產品評論的情感為何？」然後用標準的分隔符加上評論內容，執行之後，它會回答：「這段產品評論的情感是正面的。」這看起來很合理。雖然這盞燈不完美，但這位顧客看起來滿滿意的。這家公司似乎很重視顧客與產品，我認為「正面情感」是合理的判斷。

目前它輸出的是完整的一句話：「這段產品評論的情感是正面的。」
但如果你想要更簡潔的回應，讓後續處理更方便，也可以修改提示，要求它只輸出單字的答案，例如「正面」或「負面」。這樣它就只會輸出「正面」，方便我們將結果輸出成文字再進行後續處理。

再來我們來看另一個提示，同樣還是使用那篇燈具評論。這次我寫的是：「列出這篇評論中，作者所表達的情緒，不超過五種。」

大型語言模型在從文字中擷取特定資訊方面非常擅長。像這樣提取情緒的任務對於了解顧客對產品的感受非常有幫助。對許多客服單位來說，了解某位使用者是否非常不滿是很重要的。所以你可以有不同的分類任務，例如：「這篇評論的作者是否表達出憤怒？」

因為如果某人真的很生氣，那可能值得讓客服團隊特別關注，主動聯繫顧客並解決問題。而在這個例子中，這位顧客並沒有生氣。

注意，如果我是用監督式學習，要建立所有這些分類器，根本不可能在幾分鐘內完成。這就是提示的強大之處。我建議你可以暫停影片，試著修改這些提示，比如問「顧客是否感到高興」或「是否有缺件」，看看是否能利用提示對這段評論進行不同角度的推論。

再來我想展示另一個技巧，就是從顧客評論中擷取更豐富的資訊。
「資訊擷取」是自然語言處理（NLP）的一部分，它的目的是從一段文字中抽出你想要的特定資訊。

在這個提示中，我要求模型找出以下兩個項目：「購買的產品名稱」與「製造產品的公司名稱」。
如果你想要總結一大堆線上購物評論，知道買的是什麼、誰製造的、是正面還是負面情感，這些資料都非常有用，可以幫你追蹤特定產品或廠商的情緒趨勢。

我也要求它用 JSON 格式回應，使用 "Item" 和 "Brand" 作為欄位名稱。執行之後，它顯示出來的結果是：產品是「lamp（燈）」、品牌是「Lumina」，這可以輕鬆轉成 Python 字典再進一步處理。

前面我們展示了如何用提示辨認情感、判斷是否生氣、擷取產品名稱與品牌。你可以用三到四個不同提示、各自呼叫一次 get_completion() 來做這些任務，但你也可以只用一個提示，同時擷取所有這些資訊。

例如，我可以寫：「請擷取以下項目：情感、評論者是否表達憤怒、購買的產品、製造產品的公司」，然後我也要求將「是否憤怒」的值以布林值（boolean）格式呈現。執行之後，它輸出一個 JSON 格式的資料，包含情感是正面，是否生氣為 false，產品是「帶有額外收納空間的燈」，也很合理。這樣我們就能用一個提示擷取多個欄位資料。

一樣地，你也可以暫停影片，試試看輸入不同的評論，看看是否能同樣正確擷取這些資訊。

再來，讓我介紹另一個超酷的應用：主題推斷。給一段長文，你可以問它「這段文字在講什麼？主題是什麼？」

這裡我有一篇虛構的新聞文章，是關於政府員工對他們所在機構的看法，比如提到一項政府調查，結果顯示 NASA 是一個很受歡迎、滿意度很高的部門。雖然我自己是 NASA 的粉絲，但這只是虛構內容。

針對這篇文章，我可以寫一個提示：「請列出這篇文章提到的五個主題，每個主題以一到兩個字組成，並以逗號分隔。」

執行後，模型會回答這篇文章的主題：政府調查、工作滿意度、NASA 等等。這樣的主題擷取效果不錯。而且你也可以轉成 Python list，再做其他處理。

如果你有一堆文章，想要萃取主題，你也可以讓語言模型幫你建出索引。舉例來說，假設你是一家新聞網站，你追蹤的主題有「NASA、本地政府、工程、員工滿意度、聯邦政府」。

你可以寫一個提示說：「請判斷以下每個主題是否出現在這段文章中，並以 0 或 1 表示。」
同樣是剛剛那篇文章，它的主題包括 NASA、員工滿意度、聯邦政府，但不是本地政府或工程。

這種做法在機器學習中稱為「零樣本學習（Zero-shot learning）」，因為我們沒有給它任何標註過的訓練資料，只是透過提示，它就能判斷哪些主題出現在文章中。

這可以應用在新聞提醒系統中，例如你可以建立一個字典，每當出現關於 NASA 的文章，就顯示「警告：有新 NASA 新聞！」

不過要注意，我這裡用的提示格式不是很穩定。如果你要用在正式系統中，應該讓模型輸出 JSON 格式，這樣會更穩定可靠。

以上就是「推論」的內容。短短幾分鐘內，我們就能建立多種文字推論系統，而這在過去可能需要經驗豐富的機器學習工程師花上好幾天甚至幾週。

我覺得這真的很令人興奮，因為無論是資深的 ML 工程師，還是剛入門的使用者，現在都能透過撰寫提示，很快地完成這些原本複雜的自然語言處理任務。

在下一支影片中，我們會繼續介紹大型語言模型的其他應用，下一主題是「轉換（Transforming）」，也就是如何把一段文字轉換成另一段文字，比如翻譯成另一種語言。那我們接著看下一部影片吧！